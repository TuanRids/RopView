///////////////////////////////////////////////////////////////////////////////////////////////////
/// @file Inspection\IWaveTypeCollection.h.
///
/// Declares the IWaveTypeCollection interface
///////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include <memory>
#include <Inspection/InspectionEnums.h>

namespace Olympus { 
  namespace Inspection 
  {
    class IWaveTypeCollection
    {
    public:

      virtual ~IWaveTypeCollection() = default;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the wave type count
      ///
      /// @returns The count.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual std::size_t GetCount() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets a wave type
      ///
      /// @param index Zero-based index of the wave type.
      ///
      /// @returns The wave type.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual WaveType GetWaveType(std::size_t index) const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Adds a wave type
      ///
      /// @param waveType The wave type to add.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void Add(WaveType waveType) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Removes the given wave type
      ///
      /// The indexes of the elements after the removed element are all decremented of 1.
      ///
      /// @param index The index of the wave type to remove.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void Remove(std::size_t index) = 0;
    };

    using IWaveTypeCollectionPtr = std::shared_ptr<IWaveTypeCollection>;
    using IWaveTypeCollectionConstPtr = std::shared_ptr<const IWaveTypeCollection>;
  }
}
