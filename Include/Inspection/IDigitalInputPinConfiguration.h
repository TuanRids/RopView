///////////////////////////////////////////////////////////////////////////////////////////////////
/// @file IDigitalInputPinConfiguration.h.
///
/// NDE file domain path Not Available in NDE file format
/// 
/// Declares the IDigitalInputPinConfiguration interface
///////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include "Equipment/IPin.h"
#include "instrumentation/IDigitalInputPin.h"

namespace Olympus {
  namespace Inspection
  {
    class IDigitalInputPinConfiguration
    {
    public:
      virtual ~IDigitalInputPinConfiguration() = default;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the signal of the input pin
      ///
      /// @returns The signal.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual Equipment::PinSignal GetPinSignal() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the action of the input pin
      ///
      /// @returns The action.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual Instrumentation::IDigitalInputPin::Action GetPinAction() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets the action of the input pin
      ///
      /// @param action The action.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetPinAction(Instrumentation::IDigitalInputPin::Action action) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the name of the pin's connector
      ///
      /// @returns The name of the pin's connector.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual std::wstring GetConnectorName() const = 0;
    };

    using IDigitalInputPinConfigurationPtr = std::shared_ptr<IDigitalInputPinConfiguration>;
    using IDigitalInputPinConfigurationConstPtr = std::shared_ptr<const IDigitalInputPinConfiguration>;
  }
}
