///////////////////////////////////////////////////////////////////////////////////////////////////
/// @file Inspection\IThicknessSettings.h.
///
/// Declares the IThicknessSettings interface
///////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include <memory>
#include <Inspection/IThicknessSource.h>

namespace Olympus {
  namespace Inspection {

  class IThicknessSettings
  {
  public:
    virtual ~IThicknessSettings() = default;

    ///////////////////////////////////////////////////////////////////////////////////////////////////
    /// Creates thickness source using one gate
    ///
    /// @returns The newly created thickness source
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IThicknessSourcePtr CreateOneGateThicknessSource() = 0;

    ///////////////////////////////////////////////////////////////////////////////////////////////////
    /// Creates thickness source using two gate
    ///
    /// @returns The newly created thickness source
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IThicknessSourcePtr CreateTwoGateThicknessSource() = 0;

    ///////////////////////////////////////////////////////////////////////////////////////////////////
    /// Gets the thickness source
    ///
    /// @returns thickness source with one or two gates.
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IThicknessSourcePtr GetThicknessSource() const = 0;

    ///////////////////////////////////////////////////////////////////////////////////////////////////
    /// Removes the existing thickness source
    ///
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void RemoveThicknessSource() = 0;

    ///////////////////////////////////////////////////////////////////////////////////////////////////
    /// Query if the thickness source use one gate
    ///
    /// @returns True if the source use a single gate, false if not.
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool HasOneGateThicknessSource() const = 0;

    ///////////////////////////////////////////////////////////////////////////////////////////////////
    /// Query if the thickness source use two gate
    ///
    /// @returns True if the source use a two gate, false if not.
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool HasTwoGateThicknessSource() const = 0;

    ///////////////////////////////////////////////////////////////////////////////////////////////////
    /// Gets the minimum thickness in millimeter.
    ///
    /// @returns The minimum thickness.
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual double GetThicknessMin() const = 0;

    ///////////////////////////////////////////////////////////////////////////////////////////////////
    /// Sets the minimum thickness in millimeter.
    ///
    /// @param minThickness The minimum thickness.
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetThicknessMin(double minThickness) = 0;

    ///////////////////////////////////////////////////////////////////////////////////////////////////
    /// Gets the maximum thickness in millimeter.
    ///
    /// @returns The maximum thickness.
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual double GetThicknessMax() const = 0;

    ///////////////////////////////////////////////////////////////////////////////////////////////////
    /// Sets the maximum thickness in millimeter.
    ///
    /// @param maxThickness The maximum thickness.
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SettThicknessMax(double maxThickness) = 0;
  };

  using IThicknessSettingsPtr = std::shared_ptr<IThicknessSettings>;
  using IThicknessSettingsConstPtr = std::shared_ptr<const IThicknessSettings>;
}}
