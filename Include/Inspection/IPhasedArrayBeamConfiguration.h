///////////////////////////////////////////////////////////////////////////////////////////////////
/// @file IPhasedArrayBeamConfiguration.h.
///
/// Declares the IPhasedArrayBeamConfiguration interface
///////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include <memory>
#include <ultrasoundConfiguration/ITcg.h>
#include <ultrasoundConfiguration/IBeamFormation.h>
#include <ultrasoundConfiguration/IBeam.h>
#include <Inspection/InspectionEnums.h>
#include <Inspection/IGateConfigurationCollection.h>

namespace Olympus
{
  namespace Inspection
  {
    class IPhasedArrayBeamConfiguration
    {
    public:
      virtual ~IPhasedArrayBeamConfiguration() = default;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the refracted angle along the primary axis
      ///
      ///  @image html RefractedAngle.png width=30%
      /// 
      /// @returns The refracted angle primary.
      /////////////////////////////////////////////////////////////////////////////////////////////
#pragma warning(suppress : 4996)
      __declspec(deprecated("Deprecated. Use GetRefractedAnglePrimary")) virtual double GetRefractedAnglePrimary() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets the refracted angle along the primary axis
      ///
      ///  @image html RefractedAngle.png width=30%
      /// 
      /// @param angle The refracted angle primary.
      /////////////////////////////////////////////////////////////////////////////////////////////
#pragma warning(suppress : 4996)
      __declspec(deprecated("Deprecated. Use SetRefractedAnglePrimary")) virtual void SetRefractedAnglePrimary(double angle) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the refracted angle along the secondary axis
      ///
      /// @returns The refracted angle secondary.
      /////////////////////////////////////////////////////////////////////////////////////////////
#pragma warning(suppress : 4996)
      __declspec(deprecated("Deprecated. Use GetRefractedAngleSecondary")) virtual double GetRefractedAngleSecondary() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets the refracted angle along the secondary axis
      ///
      /// @image html RefractedAngle.png width=30%
      /// 
      /// @param angle The refracted angle secondary.
      /////////////////////////////////////////////////////////////////////////////////////////////
#pragma warning(suppress : 4996)
      __declspec(deprecated("Deprecated. Use SetRefractedAngleSecondary")) virtual void SetRefractedAngleSecondary(double angle) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets beam delay. The beam delay is the adjustable part of the delay inside the wedge. 
      /// This delay may vary from one beam to the other.
      ///
      /// @returns The beam delay.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual double GetBeamDelay() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets beam delay. The beam delay is the adjustable part of the delay inside the wedge.
      /// This delay may vary from one beam to the other.
      ///
      /// @param beamDelay The beam delay.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetBeamDelay(double beamDelay) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets digitizing delay, which is the time difference in nanoseconds between the specimen 
      /// front wall and the beginning of the A-scan digitizing. 
      ///
      /// @returns  The digitizing delay.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual double GetDigitizingDelay() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets the digitizing delay, which is the time difference in nanoseconds between the specimen 
      /// front wall and the beginning of the A-scan digitizing.
      ///
      /// @param  delay  The digitizing delay.
      /////////////////////////////////////////////////////////////////////////////////////////////      
      virtual void SetDigitizingDelay(double delay) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the digitizing length 
      ///
      /// @returns  The digitizing length in nanoseconds.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual double GetDigitizingLength() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets the digitizing length
      ///
      /// @param  length  The digitizing length in nanoseconds.
      /////////////////////////////////////////////////////////////////////////////////////////////   
      virtual void SetDigitizingLength(double length) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the exit point of the beam on the probe primary axis. This value is always positive.
      ///
      /// @returns The exit point primary.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual double GetExitPointPrimary() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets the exit point of the beam on the probe primary axis. This value is always positive.
      ///
      /// @param exitPoint The exit point.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetExitPointPrimary(double exitPoint) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the exit point of the beam on the probe secondary axis. This value is always positive.
      ///
      /// @returns The exit point secondary.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual double GetExitPointSecondary() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets the exit point of the beam on the probe secondary axis. This value is always positive.
      ///
      /// @param exitPoint The exit point.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetExitPointSecondary(double exitPoint) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the firing order
      ///
      /// @returns The firing order.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual std::size_t GetFiringOrder() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets the firing order
      ///
      /// @param order The order.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetFiringOrder(std::size_t order) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets gain offset. The gain applied to the beam is the total of IPhasedArrayConfiguration::SetGain()
      /// and the gain offset.
      ///
      /// @returns The gain offset.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual double GetGainOffset() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets gain offset. The gain applied to the beam is the total of IPhasedArrayConfiguration::SetGain()
      /// and the gain offset.
      ///
      /// @param gainOffset The gain offset.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetGainOffset(double gainOffset) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the recurrence
      ///
      /// @returns The recurrence.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual double GetRecurrence() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets the recurrence
      ///
      /// @param recurrence The recurrence.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetRecurrence(double recurrence) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the sum gain mode
      ///
      /// @returns The sum gain mode.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual Instrumentation::IBeam::SumGainMode GetSumGainMode() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets the sum gain mode
      ///
      /// @param mode The mode.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetSumGainMode(Instrumentation::IBeam::SumGainMode mode) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the sum gain
      ///
      /// @returns The sum gain.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual double GetSumGain() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets the sum gain
      ///
      /// @param sumGain The sum gain.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetSumGain(double sumGain) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the beam formation
      ///
      /// @returns The beam formation.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual std::shared_ptr<Instrumentation::IBeamFormation> GetBeamFormation() const = 0;

      virtual std::shared_ptr<Instrumentation::IBeamFormation> CreateBeamFormation (
        std::size_t pulserQuantity, std::size_t receiverQuantity, 
        std::size_t firstPulserElementId = 1, std::size_t firstReceiverElementId = 1) = 0;

      virtual IGateConfigurationCollectionPtr GetGateConfigurations() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the tcg
      ///
      /// @returns The tcg.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual Instrumentation::ITcgPtr GetTcg() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets the sum gain
      //
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetRefractedAngle(double angle) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the Refracted Angle
      ///
      /// @returns The Refracted Angle.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual double GetRefractedAngle() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets the Skew Angle
      ///
      /// 
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetSkewAngle(double angle) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the Skew Angle
      ///
      /// @returns The Skew Angle.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual double GetSkewAngle() const = 0;
    };

    using IPhasedArrayBeamConfigurationPtr = std::shared_ptr<IPhasedArrayBeamConfiguration>;
    using IPhasedArrayBeamConfigurationConstPtr = std::shared_ptr<const IPhasedArrayBeamConfiguration>;
  }
}
