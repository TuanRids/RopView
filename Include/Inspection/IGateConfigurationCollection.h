////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file IGateConfigurationCollection.h
///
/// NDE file domain path sectorialPulseEcho / gates
/// 
/// Declares the IGateConfigurationCollection interface.
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma once
#include <ultrasoundConfiguration/IGate.h>
#include <Inspection/IGateConfiguration.h>

namespace Olympus
{
  namespace Inspection
  {
  class IGateConfigurationCollection
  {
  public:
    virtual ~IGateConfigurationCollection() = default;

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Gets the gate configurations count
    ///
    /// @returns The count.
    ///////////////////////////////////////////////////////////////////////////////////////////////
    virtual std::size_t GetCount() const = 0;

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Gets a gate configuration
    ///
    /// @param index Zero-based index of the gate.
    ///
    /// @returns The gate configuration.
    ///////////////////////////////////////////////////////////////////////////////////////////////
    virtual IGateConfigurationPtr GetGateConfiguration(std::size_t index) = 0;

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Gets gate configuration
    ///
    /// @param index Zero-based index of the gate configuration.
    ///
    /// @returns The gate configuration.
    ///////////////////////////////////////////////////////////////////////////////////////////////
    virtual IGateConfigurationConstPtr GetGateConfiguration(std::size_t index) const = 0;

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Adds a gate
    ///
    /// @returns An IGateConfigurationPtr.
    ///////////////////////////////////////////////////////////////////////////////////////////////
    virtual IGateConfigurationPtr Add(const std::wstring& name) = 0;

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Removes the gate at the given index
    ///
    /// @param index The index of the gate to remove.
    ///////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Remove(std::size_t index) = 0;

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Removes the gate with a given name
    ///
    /// @param Gate name.
    ///////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Remove(const std::wstring& name) = 0;

    /////////////////////////////////////////////////////////////////////////////////////////////
    /// Searches for a configuration
    ///
    /// @param gateName Name of the gate.
    ///
    /// @returns The found gate.
    /////////////////////////////////////////////////////////////////////////////////////////////
    virtual IGateConfigurationPtr FindGate(const std::wstring& gateName) = 0;

    /////////////////////////////////////////////////////////////////////////////////////////////
    /// Searches for a configuration
    ///
    /// @param gateName Name of the gate.
    ///
    /// @returns The found gate.
    /////////////////////////////////////////////////////////////////////////////////////////////
    virtual IGateConfigurationConstPtr FindGate(const std::wstring& gateName) const = 0;
  };

  using IGateConfigurationCollectionPtr = std::shared_ptr<IGateConfigurationCollection>;
  using IGateConfigurationCollectionConstPtr = std::shared_ptr<const IGateConfigurationCollection>;

  }
}
