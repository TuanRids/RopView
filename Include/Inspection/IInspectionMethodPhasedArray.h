///////////////////////////////////////////////////////////////////////////////////////////////////
/// @file Inspection\IInspectionMethodPhasedArray.h.
///
/// NDE file domain path  dataGroups[index] / ultrasound / sectorialPulseEcho or linearPulseEcho
/// or compoundPulseEcho
/// 
/// Declares the IInspectionMethodPhasedArray interface
///////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include <memory>
#include <Inspection/BeamSet.h>
#include <Inspection/ITransformation2D.h>
#include <storage/EquipmentTypes.h>

namespace Olympus { namespace Inspection {

  class IPhasedArrayBeamSet;
  using IPhasedArrayBeamSetPtr = std::shared_ptr<IPhasedArrayBeamSet>;
  using IPhasedArrayBeamSetConstPtr = std::shared_ptr<const IPhasedArrayBeamSet>;

  class IInspectionMethodPhasedArray : public IInspectionMethod
  {
  public:

    virtual ~IInspectionMethodPhasedArray() = default;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Gets the beam set.
    ///
    /// NDE file domain path  dataGroups[index] / ultrasound / sectorialPulseEcho or linearPulseEcho
    /// or compoundPulseEcho
    /// 
    /// @return
    /// The beam set.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IPhasedArrayBeamSetPtr GetBeamSet() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Sets a beam set.
    ///
    /// @param phasedarrayBeamSet Set the phasedarray beam belongs to.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetBeamSet(IPhasedArrayBeamSetPtr phasedarrayBeamSet) = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Gets the probe.
    ///
    /// NDE file domain path  dataGroups[index] / ultrasound / sectorialPulseEcho or linearPulseEcho
    /// or compoundPulseEcho / probeId
    /// 
    /// @return
    /// The probe.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual Equipment::IProbePtr GetProbe() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Sets a probe.
    ///
    /// @param probe The probe.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetProbe(Equipment::IProbeRectangularArrayPtr probe) = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Sets a probe.
    ///
    /// @param probe The probe.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetProbe(Equipment::IProbeDualRectangularArrayPtr probe) = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Gets the probe position.
    ///
    /// NDE file domain path  wedges[probeId] / positioning
    /// probeId = (dataGroups[index] / ultrasound / sectorialPulseEcho or linearPulseEcho
    /// or compoundPulseEcho / probeId)
    /// 
    /// @return
    /// The probe position.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ITransformation2DPtr GetProbePosition() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Sets a probe position.
    ///
    /// @param probePosition The probe position.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetProbePosition(ITransformation2DPtr probePosition) = 0;

    /////////////////////////////////////////////////////////////////////////////////////////////
    /// Get a string that is used to provide additionnal information on the law.
    /// This string is not validated and open for use
    /// example: "Coupling Check" "Root" "Volumetry"
    ///
    /// NDE file domain path: dataGroups[index] / usage
    /// 
    /// @return
    /// usage string.
    /////////////////////////////////////////////////////////////////////////////////////////////
    virtual const std::wstring& GetUsage() const = 0;

    /////////////////////////////////////////////////////////////////////////////////////////////
    /// Get a string that is used to provide additionnal information on the law.
    /// This string is not validated and open for use
    /// example: "Coupling Check" "Root" "Volumetry"
    ///
    /// @param usage string.
    /////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetUsage(const std::wstring& name) = 0;
  };

  using IInspectionMethodPhasedArrayPtr = std::shared_ptr<IInspectionMethodPhasedArray>;
  using IInspectionMethodPhasedArrayConstPtr = std::shared_ptr<const IInspectionMethodPhasedArray>;
}}