///////////////////////////////////////////////////////////////////////////////////////////////////
/// @file ITotalFocusingMethodConfiguration.h.
///
/// NDE file domain path dataGroups[index] / fullMatrixCapture
/// 
/// Declares the ITotalFocusingMethodConfiguration interface
///////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include <memory>

#include <Inspection/IConfiguration.h>
#include <inspection/IFocusingZone.h>
#include <inspection/IIdentifierCollection.h>

namespace Olympus
{
  namespace Inspection
  {
    class ITotalFocusingMethodConfiguration : public IConfiguration
    {
    public:
      virtual ~ITotalFocusingMethodConfiguration() = default;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets pulser identifiers that match with FMC configuration.
      ///
      /// NDE file domain path dataGroups[index] / fullMatrixCapture / pulsers
      /// 
      /// @returns The pulser identifiers.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual IIdentifierCollectionPtr GetPulserIdentifiers() const = 0;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets receiver identifiers that match with FMC configuration.
      ///
      /// NDE file domain path dataGroups[index] / fullMatrixCapture / receivers
      /// 
      /// @returns The receiver identifiers.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual IIdentifierCollectionPtr GetReceiverIdentifiers() const = 0;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Get the longitudinal velocity of the wave expressed in meter per second.
      ///
      /// @return The longitudinal velocity.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual double GetLongitudinalVelocity() const = 0;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Set the longitudinal velocity of the wave expressed in meter per second.
      ///
      /// @param velocity The longitudinal velocity.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetLongitudinalVelocity(double velocity) = 0;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Get the transversal velocity of the wave expressed in meter per second.
      ///
      /// @return The transversal velocity.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual double GetTransversalVelocity() const = 0;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Set the transversal velocity of the wave expressed in meter per second.
      ///
      /// @param velocity The transversal velocity.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetTransversalVelocity(double velocity) = 0;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the gain of the configuration
      ///
      /// NDE file domain path dataGroups[index] / fullMatrixCapture / tfmDescription / gain
      /// 
      /// @returns The gain in dB.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual double GetGain() const = 0;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets the gain of the configuration
      ///
      /// @param gain The gain in dB.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetGain(double gain) = 0;

      ///////////////////////////////////////////////////////////////////////////////////////////////////
      /// Query if a reference gain is used.
      ///
      /// @returns True if a reference gain exist, false if not.
      ///////////////////////////////////////////////////////////////////////////////////////////////////
      virtual bool HasReferenceGain() const = 0;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Enables or Disables the reference gain usage.
      ///
      /// @param hasRefGain True if reference gain value is used, false if not.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual void HasReferenceGain(bool hasRefGain) = 0;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the reference gain used in dB.
      ///
      /// NDE file domain path dataGroups[index] / fullMatrixCapture / tfmDescription / referenceGain
      /// 
      /// @returns The reference gain.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual double GetReferenceGain() const = 0;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets the reference gain used in dB.
      ///
      /// @param refGain The reference gain.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetReferenceGain(double refGain) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the application Settings for this configuration.
      ///
      /// NDE file domain path : No more in the setup, All Application Settings needs to be put in HDF5 / Applications node.
      /// 
      /// @returns the application settings.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual const std::string GetApplicationSettings(std::string application) const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets the application Settings for this configuration.
      ///
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetApplicationSettings(std::string json) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets a analysis gain
      /// Analysis gain may have been applied or not to TFM data.
      ///
      /// @param gain The analysis gain in dB.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetAnalysisGain(double gain) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the analysis gain
      /// Analysis gain may have been applied or not to TFM data.
      ///
      /// NDE file domain path processes[index] / analysisBeamGain / gains[index]
      /// 
      /// @returns The analysis gain in dB.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual double GetAnalysisGain() const = 0;
    };

    using ITotalFocusingMethodConfigurationPtr = std::shared_ptr<ITotalFocusingMethodConfiguration>;
    using ITotalFocusingMethodConfigurationConstPtr = std::shared_ptr<const ITotalFocusingMethodConfiguration>;
  }
}
