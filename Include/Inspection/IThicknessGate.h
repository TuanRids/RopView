///////////////////////////////////////////////////////////////////////////////////////////////////
/// @file Inspection\IThicknessGate.h.
///
/// Declares the IThicknessGate interface
///////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include <memory>
#include <string>

namespace Olympus {
  namespace Inspection {

  enum class EventType;
  enum class AmplitudeType;

  class IThicknessGate
  {
  public:

    virtual ~IThicknessGate() = default;

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Gets the gate name
    ///
    /// @returns The gate name.
    ///////////////////////////////////////////////////////////////////////////////////////////////
    virtual const std::wstring& GetGateName() const = 0;

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Sets the gate name
    ///
    /// @param name One of the 5 predefined gate name.
    ///////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetGateName(const std::wstring& name) = 0;

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Gets event type
    ///
    /// @returns The event type.
    ///////////////////////////////////////////////////////////////////////////////////////////////
    virtual EventType GetEventType() const = 0;

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Sets event type
    ///
    /// @param eventype The event type.
    ///////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetEventType(EventType eventype) = 0;

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Gets amplitude type
    ///
    /// @returns The amplitude type.
    ///////////////////////////////////////////////////////////////////////////////////////////////
    virtual AmplitudeType GetAmplitudeType() const = 0;

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Sets amplitude type
    ///
    /// @param amplitudeType The amplitude type.
    ///////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetAmplitudeType(AmplitudeType amplitudeType) = 0;
  };

  using IThicknessGatePtr = std::shared_ptr<IThicknessGate>;
  using IThicknessGateConstPtr = std::shared_ptr<const IThicknessGate>;
}}
