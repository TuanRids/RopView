////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file BeamSet.h
///
/// NDE file domain path  dataGroups[index] / ultrasound / sectorialPulseEcho or linearPulseEcho
/// or compoundPulseEcho
/// 
/// Declares the beamset class.
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma once
#include <memory>
#include <Inspection/Formation.h>
#include <Inspection/IFocusing.h>

namespace Olympus { namespace Inspection {

  class IPhasedArrayBeamSet
  {
  public:

    virtual ~IPhasedArrayBeamSet() = default;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Gets the wave type.
    ///
    /// NDE file domain path  dataGroups[index] / ultrasound / sectorialPulseEcho or linearPulseEcho
    /// or compoundPulseEcho / waveMode
    /// 
    /// @return
    /// The wave type.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual WaveType GetWaveType() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Gets the formation which describes the sequence of elements that will be activated to generate
    /// the beamset and the angles at which each beam will be fired..
    ///
    /// NDE file domain path  dataGroups[index] / ultrasound / sectorialPulseEcho or linearPulseEcho
    /// or compoundPulseEcho
    /// 
    /// @return
    /// The formation.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IFormationPtr GetFormation() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Gets the focusing for the beamset.
    ///
    /// NDE file domain path  dataGroups[index] / ultrasound / sectorialPulseEcho or linearPulseEcho
    /// or compoundPulseEcho / focusing
    /// 
    /// @return
    /// The focusing.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual IFocusingPtr GetFocusing() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Sets a wave type for the beamset.
    ///
    /// @param waveType Type of the wave.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetWaveType(WaveType waveType) = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Sets a formation which describes the sequence of elements that will be activated to generate
    /// the beamset and the angles at which each beam will be fired.
    ///
    /// @param formation The formation.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetFormation(IFormationPtr formation) = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Sets the focusing for the beamset.
    ///
    /// @param focusing The focusing.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetFocusing(IFocusingPtr focusing) = 0;
  };

  using IPhasedArrayBeamSetPtr = std::shared_ptr<IPhasedArrayBeamSet>;
  using IPhasedArrayBeamSetConstPtr = std::shared_ptr<const IPhasedArrayBeamSet>;
}}
