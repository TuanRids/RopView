///////////////////////////////////////////////////////////////////////////////////////////////////
/// @file Inspection\IAngleRange.h.
///
/// dataGroups[index] / ultrasound / sectorialPulseEcho or compoundPulseEcho / beamRefractedAngles
/// 
/// Declares the IAngleRange interface
///////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include <memory>

namespace Olympus { namespace Inspection {

  class IAngleRange;

  using IAngleRangePtr = std::shared_ptr<IAngleRange>;
  using IAngleRangeConstPtr = std::shared_ptr<const IAngleRange>;

  class IAngleRange
  {
  public:

    /// Destructor
    virtual ~IAngleRange() = default;

    /////////////////////////////////////////////////////////////////////////////////////////////
    /// Gets the start angle in degrees.
    ///
    /// dataGroups[index] / ultrasound / sectorialPulseEcho or compoundPulseEcho / beamRefractedAngles / start
    /// 
    /// @returns The start angle.
    /////////////////////////////////////////////////////////////////////////////////////////////
    virtual double GetStart() const = 0;

    /////////////////////////////////////////////////////////////////////////////////////////////
    /// Gets the stop angle in degrees.
    ///
    /// dataGroups[index] / ultrasound / sectorialPulseEcho or compoundPulseEcho / beamRefractedAngles / stop
    /// 
    /// @returns The stop angle.
    /////////////////////////////////////////////////////////////////////////////////////////////
    virtual double GetStop() const = 0;

    /////////////////////////////////////////////////////////////////////////////////////////////
    /// Gets the step angle in degrees.
    ///
    /// dataGroups[index] / ultrasound / sectorialPulseEcho or compoundPulseEcho / beamRefractedAngles / step
    /// 
    /// @returns The step angle.
    /////////////////////////////////////////////////////////////////////////////////////////////
    virtual double GetStep() const = 0;

    /////////////////////////////////////////////////////////////////////////////////////////////
    /// Sets a start angle in degrees.
    ///
    /// @param start The start angle.
    /////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetStart(double start) = 0;

    /////////////////////////////////////////////////////////////////////////////////////////////
    /// Sets a stop angle in degrees.
    ///
    /// @param stop The stop angle.
    /////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetStop(double stop) = 0;

    /////////////////////////////////////////////////////////////////////////////////////////////
    /// Sets a step angle in degrees.
    ///
    /// @param step Amount to increment by.
    /////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetStep(double step) = 0;
  };
}}