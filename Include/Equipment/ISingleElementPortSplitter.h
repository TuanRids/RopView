///////////////////////////////////////////////////////////////////////////////////////////////////
/// @file Equipment/ISingleElementPortSplitter.h.
///
/// NDE file domain path: Not available
/// 
/// Declares the ISingleElementPortSplitter interface
///////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include <cstddef>
#include <memory>
#include <Equipment/IMultiElementConnector.h>

namespace Olympus { namespace Equipment
{

  class ISinglePulserReceiverPort;
  using ISinglePulserReceiverPortPtr = std::shared_ptr<ISinglePulserReceiverPort>;
  using ISinglePulserReceiverPortConstPtr = std::shared_ptr<const ISinglePulserReceiverPort>;

class ISingleElementPortSplitter : public IMultiElementConnector
{
public:
  virtual ~ISingleElementPortSplitter() = default;

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /// Gets the single element splitter port count
  ///
  /// @returns The port count.
  /////////////////////////////////////////////////////////////////////////////////////////////////
  virtual std::size_t GetPortCount() const = 0;

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /// Gets a port
  ///
  /// @param port The 0 based index of the port.
  ///
  /// @returns The port.
  /////////////////////////////////////////////////////////////////////////////////////////////////
  virtual ISinglePulserReceiverPortPtr GetPort(std::size_t port) = 0;

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /// Gets a port
  ///
  /// @param port The 0 based index of the port.
  ///
  /// @returns The port.
  /////////////////////////////////////////////////////////////////////////////////////////////////
  virtual ISinglePulserReceiverPortConstPtr GetPort(std::size_t port) const = 0;

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /// Sets port routing
  ///
  /// @param port The 1 based index of the port.
  /// @param pin  The 1 based index of the pin.
  /////////////////////////////////////////////////////////////////////////////////////////////////
  virtual void SetPortRouting(std::size_t port, std::size_t pin) = 0;
};
}}
