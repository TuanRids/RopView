///////////////////////////////////////////////////////////////////////////////////////////////////
/// @file D:\Git\Storage\Include\Equipment\IMultiElementSplitter.h.
///
/// NDE file domain path: Not available
/// 
/// Declares the IMultiElementSplitter interface
///////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include <cstddef>
#include <memory>
#include <Equipment/IMultiElementConnector.h>

namespace Olympus { namespace Equipment {

  class IMultiPulserReceiverPort;
  using IMultiPulserReceiverPortPtr = std::shared_ptr<IMultiPulserReceiverPort>;
  using IMultiPulserReceiverPortConstPtr = std::shared_ptr<const IMultiPulserReceiverPort>;

class IMultiElementSplitter : public IMultiElementConnector
{
public:
  virtual ~IMultiElementSplitter() = default;

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /// Gets port count
  ///
  /// @returns The port count.
  /////////////////////////////////////////////////////////////////////////////////////////////////
  virtual std::size_t GetPortCount() const = 0;

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /// Gets a port
  ///
  /// @param pos The 0 based index of the port.
  ///
  /// @returns The port.
  /////////////////////////////////////////////////////////////////////////////////////////////////
  virtual IMultiPulserReceiverPortPtr GetPort(std::size_t pos) = 0;

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /// Gets a port
  ///
  /// @param pos The 0 based index of the port.
  ///
  /// @returns The port.
  /////////////////////////////////////////////////////////////////////////////////////////////////
  virtual IMultiPulserReceiverPortPtr GetPort(std::size_t pos) const = 0;
};
}}
