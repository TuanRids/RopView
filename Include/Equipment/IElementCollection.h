////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file IElementCollection.h.
///
/// Declares the IElementCollection interface.
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma once
#include <memory>
#include <Equipment/IElement.h>

namespace Olympus
{
  namespace Equipment
  {
    class IElementCollection;
    using IElementCollectionPtr = std::shared_ptr<IElementCollection>;
    using IElementCollectionConstPtr = std::shared_ptr<const IElementCollection>;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Collection that includes all the elements included in a transducer array
    /// The information of this section is important to allow RayTracing inside the wedge.
    /// 
    /// NDE file domain path "probes"[index] / "phasedArrayLinear" / "elements"
    /// 
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    class IElementCollection
    {
    public:

      virtual ~IElementCollection() = default;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets an element.
      ///
      /// @param id The name.
      ///
      /// @return
      /// The element.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual IElementPtr GetElement(std::size_t id) = 0;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets an element.
      ///
      /// @param id The name.
      ///
      /// @return
      /// The element.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual IElementConstPtr GetElement(std::size_t id) const = 0;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the count of elements.
      ///
      /// @return
      /// The count.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual std::size_t GetCount() const = 0;
    };
  }
}
