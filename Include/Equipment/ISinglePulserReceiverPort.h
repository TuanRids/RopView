///////////////////////////////////////////////////////////////////////////////////////////////////
/// @file Equipment/ISinglePulserReceiverPort.h.
///
/// NDE file domain path: Not available
/// 
/// Declares the ISinglePulserReceiverPort interface
///////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include <cstddef>
#include <Equipment/IPulserReceiverPort.h>

namespace Olympus { namespace Equipment
{
class ISinglePulserReceiverPort : public IPulserReceiverPort
{
public:

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /// Query if this object is pulser only
  ///
  /// @returns True if pulser only, false if not.
  /////////////////////////////////////////////////////////////////////////////////////////////////
  virtual bool IsPulserOnly() const = 0;

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /// Gets connected pin
  ///
  /// @returns The connected pin.
  /////////////////////////////////////////////////////////////////////////////////////////////////
  virtual std::size_t GetConnectedPin() const = 0;

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /// Sets connected pin
  ///
  /// @param pin The first parameter.
  /////////////////////////////////////////////////////////////////////////////////////////////////
  virtual void SetConnectedPin(std::size_t pin) = 0;
};
}}
