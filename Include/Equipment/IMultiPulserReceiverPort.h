///////////////////////////////////////////////////////////////////////////////////////////////////
/// @file Equipment/IMultiPulserReceiverPort.h.
///
/// NDE file domain path: Not available
/// 
/// Declares the IMultiPulserReceiverPort interface
///////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include <cstddef>
#include <Equipment/IPulserReceiverPort.h>

namespace Olympus { namespace Equipment
{

  class ISingleElementPortSplitter;
  using ISingleElementPortSplitterPtr = std::shared_ptr<ISingleElementPortSplitter>;
  using ISingleElementPortSplitterConstPtr = std::shared_ptr<const ISingleElementPortSplitter>;

  class IMultiElementSplitter;
  using IMultiElementSplitterPtr = std::shared_ptr<IMultiElementSplitter>;
  using IMultiElementSplitterConstPtr = std::shared_ptr<const IMultiElementSplitter>;

class IMultiPulserReceiverPort : public IPulserReceiverPort
{
public:
  virtual ~IMultiPulserReceiverPort() = default;

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /// Gets the pin count
  ///
  /// @returns The pin count.
  /////////////////////////////////////////////////////////////////////////////////////////////////
  virtual std::size_t GetPinCount() const = 0;

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /// Gets the aperture
  ///
  /// @returns The aperture.
  /////////////////////////////////////////////////////////////////////////////////////////////////
  virtual std::size_t GetAperture() const = 0;

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /// Adds a multi element splitter
  ///
  /// @param portCount Number of ports.
  ///
  /// @returns An IMultiElementSplitterPtr.
  /////////////////////////////////////////////////////////////////////////////////////////////////
  virtual IMultiElementSplitterPtr
  PutMultiElementSplitter(std::size_t portCount) = 0;

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /// Adds a single element port splitter
  ///
  /// @param portCount Number of ports.
  ///
  /// @returns An ISingleElementPortSplitterPtr.
  /////////////////////////////////////////////////////////////////////////////////////////////////
  virtual ISingleElementPortSplitterPtr
  PutSingleElementPortSplitter(std::size_t portCount) = 0;

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /// Gets the first pin id (1-based)
  ///
  /// @returns The first pin id.
  /////////////////////////////////////////////////////////////////////////////////////////////////
  virtual std::size_t GetFirstPinId() const = 0;
};
}}
