////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file IProbe.h.
///
/// NDE file domain path probes[index] / conventionalPulseEcho or phasedArrayLinear
/// 
/// Declares the IProbe interface.
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma once
#include <memory>
#include <string>
#include <Equipment/IElementOffset.h>

namespace Olympus
{
  namespace Equipment
  {
    enum class MountingOrientation
    {
      Normal = 0,
      Lateral = 90,
      ReverseNormal = 180,
      ReverseLateral = 270,
    };

    class IWedge;
    using IWedgePtr = std::shared_ptr<IWedge>;
    using IWedgeConstPtr = std::shared_ptr<const IWedge>;

    class IProbe;
    using IProbePtr = std::shared_ptr<IProbe>;
    using IProbeConstPtr = std::shared_ptr<const IProbe>;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// The probe set, composed of a transducer and a wedge or liquid column.
    /// The information of this section is important to allow RayTracing inside the wedge.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    class IProbe
    {
    public:

      virtual ~IProbe() = default;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the name.
      ///
      /// NDE file domain path probes[index] / model
      /// 
      /// @return
      /// The name.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual const std::wstring& GetName() const = 0;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets a name.
      ///
      /// @param name The name.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetName(const std::wstring& name) = 0;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Query if this object has wedge.
      ///
      /// NDE file domain path "probes"[index] / "wedgeAssociation"
      /// 
      /// @return
      /// true if wedge, false if not.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual bool HasWedge() const = 0;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the wedge.
      ///
      /// NDE file domain path wedgeId = "probes"[index] / "wedgeAssociation" / wedgeId
      ///                      wedge = "wedges"[wedgeId]
      /// 
      /// @return
      /// The wedge.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual IWedgePtr GetWedge() = 0;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the wedge.
      /// 
      /// NDE file domain path wedgeId = "probes"[index] / "wedgeAssociation" / wedgeId
      ///                      wedge = "wedges"[wedgeId]
      /// 
      /// @return
      /// The wedge.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual IWedgeConstPtr GetWedge() const = 0;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets a wedge.
      ///
      /// NDE file domain path wedgeId = "probes"[index] / "wedgeAssociation" / wedgeId
      ///                      wedge = "wedges"[wedgeId]
      /// 
      /// @param wedge The wedge.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetWedge(IWedgePtr wedge) = 0;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the element offset.
      ///
      /// NDE file domain path "wedges"[index] / "angleBeamWedge" / mountingLocations[index] 
      /// 
      /// @return
      /// The element offset.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual IElementOffsetPtr GetElementOffset() = 0;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the element offset.
      ///
      /// @return
      /// The element offset.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual IElementOffsetConstPtr GetElementOffset() const = 0;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets an offset.
      ///
      /// @param offset The offset.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetOffset(IElementOffsetPtr offset) = 0;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the reversed element offset.
      ///
      /// NDE file domain path Not available in NDE
      /// 
      /// @return
      /// The reversed element offset.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual IElementOffsetPtr GetReversedElementOffset() = 0;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the reversed element offset.
      ///
      /// NDE file domain path Not available in NDE
      /// 
      /// @return
      /// The reversed element offset.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual IElementOffsetConstPtr GetReversedElementOffset() const = 0;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets a reversed element offset.
      ///
      /// @param reversedOffset The reversed offset.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetReversedElementOffset(IElementOffsetPtr reversedOffset) = 0;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the manufacturer.
      ///
      /// NDE file domain path Not available in NDE
      /// 
      /// @return
      /// The manufacturer.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual const std::wstring& GetManufacturer() const = 0;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets the manufacturer.
      ///
      /// @param manufacturer The manufacturer.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetManufacturer(const std::wstring& manufacturer) = 0;
    };
  }
}
