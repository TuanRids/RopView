///////////////////////////////////////////////////////////////////////////////////////////////////
/// @file Equipment\ITransducerConventionalRound.h.
///
/// NDE file domain path probes[index] / conventionalRound
/// 
/// Declares the ITransducerConventionalRound interface
///////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include <memory>
#include <Equipment/ITransducer.h>

namespace Olympus { namespace Equipment {

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Single round transducer for a conventional ultrasonic probe
  /// The information of this section is important to allow RayTracing inside the wedge.
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  class ITransducerConventionalRound : public ITransducer
  {
  public:

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Gets the diameter  of the transducer in millimeters.
    ///
    /// NDE file domain path probes[index] / conventionalRound / diameter
    /// 
    /// @return The diameter of the transducer in millimeters.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual double GetDiameter() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Sets a diameter for the transducer in millimeters.
    ///
    /// @param diameter The diameter of the transducer in millimeters.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetDiameter(double diameter) = 0;
  };

  using ITransducerConventionalRoundPtr = std::shared_ptr<ITransducerConventionalRound>;
  using ITransducerConventionalRoundConstPtr = std::shared_ptr<const ITransducerConventionalRound>;
}}
