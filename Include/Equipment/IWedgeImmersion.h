///////////////////////////////////////////////////////////////////////////////////////////////////
/// @file Equipment\IWedgeImmersion.h.
///
/// NDE file domain path probes[index] / fluidColumn
/// 
/// Declares the IWedgeImmersion interface
///////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include <memory>
#include <string>
#include <Equipment/IWedge.h>

namespace Olympus { namespace Equipment {

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Physical wedge in which the conventional transducer in installed. This wedge receives a single
  /// element transducer.
  /// The information of this section is important to allow RayTracing inside the wedge.
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  class IWedgeImmersion : public IWedge
  {
  public:
    virtual ~IWedgeImmersion() = default;

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Gets the fluid's material name
    ///
    /// NDE file domain path probes[index] / fluidColumn / name
    /// 
    /// @returns The material name.
    ///////////////////////////////////////////////////////////////////////////////////////////////
    virtual const std::wstring& GetMaterialName() const = 0;

    /////////////////////////////////////////////////////////////////////////////////////////////
    /// Sets material name
    ///
    /// @param materialName Name of the material.
    /////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetMaterialName(const std::wstring& materialName) = 0;

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Gets the fluid's material velocity
    ///
    /// NDE file domain path probes[index] / fluidColumn / longitudinalVelocity
    /// 
    /// @returns The material velocity.
    ///////////////////////////////////////////////////////////////////////////////////////////////
    virtual double GetMaterialVelocity() const = 0;

    /////////////////////////////////////////////////////////////////////////////////////////////
    /// Sets material velocity
    ///
    /// @param materialVelocity The material velocity.
    /////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetMaterialVelocity(double materialVelocity) = 0;

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Gets the angle of the transducer in the fluid or the angle of the water column.
    ///
    /// NDE file domain path probes[index] / fluidColumn / wedgeAngle
    /// 
    /// @image html WedgeAngle.png width=30%
    ///
    /// @returns The angle of the transducer in the fluid or the angle of the water column.
    ///////////////////////////////////////////////////////////////////////////////////////////////
    virtual double GetAngle() const = 0;

    /////////////////////////////////////////////////////////////////////////////////////////////
    /// Sets an angle
    ///
    /// @param angle The angle.
    /////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetAngle(double angle) = 0;

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Gets the roof of the transducer in the fluid or the angle of the water column.
    ///
    /// NDE file domain path probes[index] / fluidColumn / roofAngle
    /// 
    /// @image html RoofAngle.png width=30%
    ///
    /// @returns The roof of the transducer in the fluid or the angle of the water column..
    ///////////////////////////////////////////////////////////////////////////////////////////////
    virtual double GetRoof() const = 0;

    /////////////////////////////////////////////////////////////////////////////////////////////
    /// Sets a roof
    ///
    /// @param roof The roof.
    /////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetRoof(double roof) = 0;

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// Gets the height of the water column or the distance between the submerged transducer and
    /// the inspected material.
    ///
    /// NDE file domain path probes[index] / fluidColumn / nominalHeight
    /// 
    /// @image html Height.png width=30%
    ///
    /// @returns The height of the water column or the distance between the submerged transducer and
    /// the inspected material.
    ///////////////////////////////////////////////////////////////////////////////////////////////
    virtual double GetHeight() const = 0;

    /////////////////////////////////////////////////////////////////////////////////////////////
    /// Sets a height
    ///
    /// @param height The height.
    /////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetHeight(double height) = 0;
  };

  using IWedgeImmersionPtr = std::shared_ptr<IWedgeImmersion>;
  using IWedgeImmersionConstPtr = std::shared_ptr<const IWedgeImmersion>;
}}