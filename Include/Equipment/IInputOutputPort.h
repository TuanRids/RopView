///////////////////////////////////////////////////////////////////////////////////////////////////
/// @file IInputOutputPort.h.
///
/// NDE file domain path Not Available in NDE file format
/// 
/// Declares the IInputOutputPort interface
///////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include <memory>
#include <string>

namespace Olympus
{
  namespace Equipment
  {
    enum class PinSignal;

    class IPin;
    using IPinPtr = std::shared_ptr<IPin>;
    using IPinConstPtr = std::shared_ptr<const IPin>;

    /////////////////////////////////////////////////////////////////////////////////////////////
    /// An object representing the IO port on a device.
    ///
    /// The IO port is composed of pins which are described in the device manual.
    /// For a standard FocusPx device, the supported pins and the associated signals for
    /// the encoders inputs and outputs are shown in the following table.
    /// <table>
    /// <caption id="">"IO_LEMO" encoder IO port</caption>
    /// <tr><th>ID<th>Pin signal
    /// <tr><td>9<td>PhaseA_axis1
    /// <tr><td>10<td>PhaseB_axis1
    /// <tr><td>11<td>PhaseA_axis2
    /// <tr><td>12<td>PhaseB_axis2
    /// </table>
    /////////////////////////////////////////////////////////////////////////////////////////////
    class IInputOutputPort
    {
    public:
      virtual ~IInputOutputPort() = default;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the name of the IO Port
      ///
      /// @returns The name.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual const std::wstring& GetName() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the device name
      ///
      /// @returns The device name.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual const std::wstring& GetAcquisitionUnitName() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the IO Port pin count
      ///
      /// @returns The pin count.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual std::size_t GetPinCount() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets a pin from the IO Port
      ///
      /// @param index Zero-based index of the pin.
      ///
      /// @returns The pin.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual IPinPtr GetPin(std::size_t index) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets a pin from the IO Port
      ///
      /// @param index Zero-based index of the pin.
      ///
      /// @returns A constant pin.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual IPinConstPtr GetPin(std::size_t index) const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Searches for a pin in the IO Port
      ///
      /// @param sig The desired pin signal.
      ///
      /// @returns The found pin or a null pointer if not found.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual IPinPtr FindPin(PinSignal sig) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Searches for a pin in the IO Port
      ///
      /// @param sig The desired pin signal.
      ///
      /// @returns A constant pin.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual IPinConstPtr FindPin(PinSignal sig) const = 0;
    };

    using IInputOutputPortPtr = std::shared_ptr<IInputOutputPort>;
    using IInputOutputPortConstPtr = std::shared_ptr<const IInputOutputPort>;
  }
}
