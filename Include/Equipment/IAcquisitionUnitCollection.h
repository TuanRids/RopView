///////////////////////////////////////////////////////////////////////////////////////////////////
/// @file IAcquisitionUnitCollection.h.
///
/// NDE file domain path "acquistionUnits"
/// 
/// Declares the IAcquisitionUnitCollection interface
///////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include <memory>
#include <string>
#include <Equipment/IAcquisitionUnit.h>

namespace Olympus
{
  namespace Equipment
  {
    class IAcquisitionUnitCollection
    {
    public:
      virtual ~IAcquisitionUnitCollection() = default;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets a device
      ///
      /// @param index Zero-based index of the.
      ///
      /// @returns The device.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual IAcquisitionUnitPtr GetAcquisitionUnit(std::size_t index) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets a device
      ///
      /// @param index Zero-based index of the.
      ///
      /// @returns The device.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual IAcquisitionUnitConstPtr GetAcquisitionUnit(std::size_t index) const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Searches for the first device
      ///
      /// @param name The name.
      ///
      /// @returns The found device or a null pointer if not found.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual IAcquisitionUnitPtr FindAcquisitionUnit(const std::wstring& name) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Searches for the first device
      ///
      /// @param name The name.
      ///
      /// @returns The found device or a null pointer if not found.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual IAcquisitionUnitConstPtr FindAcquisitionUnit(const std::wstring& name) const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the count of devices in the collection
      ///
      /// @returns The count.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual std::size_t GetCount() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Removes the device with the given index
      ///
      /// @param index The index to remove.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void Remove(std::size_t index) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Removes the device with the given name
      ///
      /// @param name The name to remove.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void Remove(const std::wstring& name) = 0;
    };

    using IAcquisitionUnitCollectionPtr = std::shared_ptr<IAcquisitionUnitCollection>;
    using IAcquisitionUnitCollectionConstPtr = std::shared_ptr<const IAcquisitionUnitCollection>;
  }
}
