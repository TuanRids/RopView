////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file ITransducer.h.
///
/// NDE file domain path probes[index]
/// 
/// Declares the ITransducer interface.
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma once
#include <memory>
#include <string>

namespace Olympus
{
  namespace Equipment
  {
    class ITransducer;
    using ITransducerPtr = std::shared_ptr<ITransducer>;
    using ITransducerConstPtr = std::shared_ptr<const ITransducer>;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Base class for any type of ultrasonic transducer
    /// The information of this section is important to allow RayTracing inside the wedge.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    class ITransducer
    {
    public:

      virtual ~ITransducer() = default;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the model.
      ///
      /// NDE file domain path probes[index] / model
      /// 
      /// @return
      /// The model.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual const std::wstring& GetModel() const = 0;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets a model.
      ///
      /// @param model The model.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetModel(const std::wstring& model) = 0;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the frequency.
      ///
      /// NDE file domain path probes[index] / phasedArrayLinear / centralFrequency
      /// 
      /// @return
      /// The frequency.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual double GetFrequency() const = 0;

      ////////////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets a frequency.
      ///
      /// @param frequency The frequency.
      ////////////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetFrequency(double frequency) = 0;
    };
  }
}
