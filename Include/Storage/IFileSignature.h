////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file IFileSignature.h
///
/// NDE file domain path / The signature is not part of the Domain Json, 
/// they must be read from the root of the file in the HDF 5 tree
/// 
/// The file signature holds metadata information such as the company name, application name,
/// application version and date/time.
////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include <string>
#include <memory>
#include <storage/IOriginalFileSource.h>
#include <storage/ISemanticVersion.h>
#include <storage/IGeoCoordinate.h>

namespace Olympus
{
  namespace FileManagement
  {
    class IFileSignature
    {
    public:
      virtual ~IFileSignature() = default;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets company name
      ///
      /// NDE file HDF5 file root Attirbute "Company name"
      /// 
      /// @returns The company name.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual const std::wstring& GetCompanyName() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets application name
      ///
      /// NDE file HDF5 file root Attirbute "Application name"
      /// 
      /// @returns The application name.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual const std::wstring& GetApplicationName() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets application version
      ///
      /// NDE file HDF5 file root Attirbute "Application version"
      /// 
      /// @returns The application version.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual const std::wstring& GetApplicationVersion() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets file name
      ///
      /// NDE file HDF5 file root Not available in NDE
      /// 
      /// @returns The file name.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual const std::wstring& GetFilename() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets file version
      ///
      /// NDE file HDF5 file root Attirbute "Format Version"
      /// 
      /// @returns The file version.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual const std::wstring GetFileVersion() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets file version of the OpenView version used to create the file.
      ///
      /// @returns The library version.
      /////////////////////////////////////////////////////////////////////////////////////////////
      __declspec(deprecated("Deprecated. Use GetLibraryVersion.")) 
        virtual const std::wstring GetOpenViewVersion() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets date time when the file was saved
      /// Format is: ISO-8601's long date/time format (yyyy-mm-ddThh:mm:ss.nnnnnn+|-hh:mm)
      ///
      /// Examples:
      /// "1970-01-01T00:00:00.000000-00:00"
      ///
      /// NDE file HDF5 file root Attirbute "Date created"
      /// 
      /// @returns The date time
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual const std::string& GetDateTime() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Query if the original file source is available
      ///
      /// @returns  True if file source is available.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual bool HasOriginalFileSource() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets original file source
      ///
      /// NDE file HDF5 file root Not available in NDE
      /// 
      /// @returns The original file source.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual IOriginalFileSourcePtr GetOriginalFileSource() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets version of the Storage library used to create the file.
      ///
      /// @returns The library version.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual const std::wstring GetLibraryVersion() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Query if the GPS GeoCoordinate is available
      ///
      /// @returns  True if file source is available.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual bool HasGeoCoordinate() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets original file source
      ///
      /// NDE file HDF5 file root To DO in NDE
      /// 
      /// @returns The original file source.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual IGeoCoordinatePtr GetGeoCoordinate() const = 0;
    };

    using IFileSignaturePtr = std::shared_ptr<IFileSignature>;
  }
}
