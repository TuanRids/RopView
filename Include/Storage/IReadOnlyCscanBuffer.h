////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file IReadOnlyCscanBuffer.h.
///
/// Declares the IReadOnlyCscanBuffer interface
////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include <memory>
#include <Storage/ICscanData.h>
#include <Storage/ICscanBufferDescriptor.h>


namespace Olympus {
  namespace Ultrasound {
    namespace Data
    {
      class IReadOnlyCscanBuffer
      {
      public:
        virtual ~IReadOnlyCscanBuffer() = default;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Gets the descriptor associated with this buffer
        ///
        /// @returns  The descriptor.
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual ICscanBufferDescriptorConstPtr GetDescriptor() const = 0;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Gets the column quantity of the buffer
        ///
        /// @returns  The column quantity.
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual size_t GetScanCellQuantity() const = 0;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Gets the row quantity of the buffer
        ///
        /// @returns  The row quantity.
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual size_t GetIndexCellQuantity() const = 0;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Reads the CScan data
        ///
        /// @param  scanCell The column of the patch. The column is contant in the scan direction.
        /// @param  indexCell The row of the patch. The row is contant in the index direction.
        ///
        /// @returns  The CScan data.
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual ICscanDataConstPtr Read(size_t scanCell, size_t indexCell) const = 0;
      };

      using IReadOnlyCscanBufferConstPtr = std::shared_ptr<const IReadOnlyCscanBuffer>;
    }
  }
}
