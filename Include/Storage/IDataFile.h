#pragma once
#include <memory>
#include <CustomSection/ICustomSectionCollection.h>
#include <Indication/IIndicationCollection.h>
#include <storage/ISetup.h>
#include <storage/IAcquiredData.h>
#include <storage/IFileSignature.h>

namespace Olympus
{
  namespace FileManagement
  {
    class IDataFile
    {
    public:
      virtual ~IDataFile() = default;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the setup
      ///
      /// @note The setup will not be saved when using the "Save" methods as it
      ///       needs to match the acquired data also contained in the file. To
      ///       alter the setup, you first need to save it as a setup file. From
      ///       there, any changes made will be saved in the file.
      ///
      /// @returns The setup.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual ISetupPtr GetSetup() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the acquired data.
      ///
      /// @returns The data.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual IAcquiredDataPtr GetData() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets custom sections.
      ///
      /// @returns The custom sections.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual ICustomSectionCollectionPtr GetCustomSections() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the indications.
      ///
      /// @returns The indications.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual Indication::IIndicationCollectionPtr GetIndications() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Updates the opened data file.
      /// 
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void Save() = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Close the opened data file.
      /// 
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void Close() = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Check if a level of protection to the integrity of the file is set.
      /// 
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual bool HasValidChecksum() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Get the original filename for this file.
      /// 
      /// The original filename is the one passed as the destination file argument in the call
      /// SaveDataFile(const std::wstring& destinationFile, IAcquisitionDataPtr acquisitionData)
      /////////////////////////////////////////////////////////////////////////////////////////////
      __declspec(deprecated("Deprecated. Use GetFileSignature")) 
        virtual std::wstring GetOriginalFilename() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the file signature.
      ///
      /// @returns The file signature of the data file.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual IFileSignaturePtr GetFileSignature() const = 0;
    };

    using IDataFilePtr = std::shared_ptr<IDataFile>;
    using IDataFileConstPtr = std::shared_ptr<const IDataFile>;
  }
}
