////////////////////////////////////////////////////////////////////////////////////////////////////
/// IReadOnlyAscanBuffer.h.
///
/// Declares the AScan buffer for read-only scenarios
////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include <memory>
#include <Storage/IAscanData.h>
#include <Storage/IAscanBufferDescriptor.h>


namespace Olympus {
  namespace Ultrasound {
    namespace Data
    {
      class IReadOnlyAscanBuffer
      {
      public:
        virtual ~IReadOnlyAscanBuffer() = default;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Gets the descriptor associated with this buffer
        ///
        /// @returns  The descriptor.
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual IAscanBufferDescriptorConstPtr GetDescriptor() const = 0;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Gets the column (scanCell) quantity of the buffer
        ///
        /// @returns  The column (scanCell) quantity.
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual size_t GetScanCellQuantity() const = 0;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Gets the row (indexCell) quantity of the buffer
        ///
        /// @returns  The row (indexCell) quantity.
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual size_t GetIndexCellQuantity() const = 0;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Reads the AScan data at the specified location 
        /// 
        /// @image html WeldPatch.png "Weld Patch" width=50%
        ///
        /// @param  scanCell The column of the patch. The column is contant in the scan direction.
        /// @param  indexCell The row of the patch. The row is contant in the index direction.
        ///
        /// @returns  An IAscanDataConstPtr.
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual IAscanDataConstPtr Read(size_t scanCell, size_t indexCell) const = 0;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Gets the sample quantity contained by the A-Scan
        ///
        /// @returns  The sample quantity.
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual size_t GetSampleQuantity() const = 0;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Gets data type for each point of the A-Scan
        ///
        /// @returns  The data type.
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual DataType GetDataType() const = 0;
      };

      using IReadOnlyAscanBufferConstPtr = std::shared_ptr<const IReadOnlyAscanBuffer>;
    }
  }
}
