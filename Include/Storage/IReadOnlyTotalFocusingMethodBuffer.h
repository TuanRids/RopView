////////////////////////////////////////////////////////////////////////////////////////////////////
/// IReadOnlyTotalFocusingMethodBuffer.h.
///
/// Declares the TotalFocusingMethod buffer for read-only scenarios
////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include <memory>
#include <storage/BufferDataType.h>
#include <storage/ITotalFocusingMethodBufferDescriptor.h>
#include <storage/ITotalFocusingMethodData.h>

namespace Olympus {
  namespace Ultrasound {
    namespace Data
    {
      class IReadOnlyTotalFocusingMethodBuffer
      {
      public:
        virtual ~IReadOnlyTotalFocusingMethodBuffer() = default;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Gets the descriptor associated with this buffer.
        ///
        /// @returns  The descriptor.
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual ITotalFocusingMethodBufferDescriptorConstPtr GetDescriptor() const = 0;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Gets the scanCell quantity of the buffer.
        ///
        /// @returns  The scanCell quantity.
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual size_t GetScanCellQuantity() const = 0;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Gets the indexCell quantity of the buffer corresponding to the TFM columns,
        ///
        /// @returns  The indexCell quantity.
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual size_t GetIndexCellQuantity() const = 0;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Gets the sample quantity (row) contained by a TFM column.
        ///
        /// @returns  The sample quantity.
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual size_t GetSampleQuantity() const = 0;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Gets data type for each sample.
        ///
        /// @returns  The data type.
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual DataType GetDataType() const = 0;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Reads the TFM data at a specified column location.
        /// 
        /// @param  scanCell The cell position of the patch in the scan direction.
        /// @param  indexCell The cell position of the patch in the index direction, this is also a TFM column.
        ///
        /// @returns  An ITotalFocusingMethodData interface.
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual ITotalFocusingMethodDataConstPtr Read(size_t scanCell, size_t indexCell) const = 0;
      };

      using IReadOnlyTotalFocusingMethodBufferConstPtr = std::shared_ptr<const IReadOnlyTotalFocusingMethodBuffer>;
    }
  }
}
