///////////////////////////////////////////////////////////////////////////////////////////////////
/// @file Indication\IIndication.h.
///
/// NDE file domain path / The custom section are not part of the Domain, 
/// 
/// Declares the IIndication interface
///////////////////////////////////////////////////////////////////////////////////////////////////
#pragma once
#include <memory>
#include <string>

namespace Olympus
{
  namespace Indication
  {
    class IPatchPosition;
    using IPatchPositionPtr = std::shared_ptr<IPatchPosition>;
    using IPatchPositionConstPtr = std::shared_ptr<const IPatchPosition>;

    class IReadingCollection;
    using IReadingCollectionPtr = std::shared_ptr<IReadingCollection>;
    using IReadingCollectionConstPtr = std::shared_ptr<const IReadingCollection>;

    class IVolumePosition;
    using IVolumePositionPtr = std::shared_ptr<IVolumePosition>;
    using IVolumePositionConstPtr = std::shared_ptr<const IVolumePosition>;

    class ICustomFieldCollection;
    using ICustomFieldCollectionPtr = std::shared_ptr<ICustomFieldCollection>;
    using ICustomFieldCollectionConstPtr = std::shared_ptr<const ICustomFieldCollection>;

    enum class Verdict { Accepted, Rejected, Unspecified };

    /// An indication.
    class IIndication
    {
    public:
      virtual ~IIndication() = default;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the beamset's name
      ///
      /// @returns The beamset's name.
      /////////////////////////////////////////////////////////////////////////////////////////////
      __declspec(deprecated("Deprecated. Use GetName")) virtual const std::wstring& GetBeamSetName() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets beam id
      ///
      /// @returns The beam id.
      /////////////////////////////////////////////////////////////////////////////////////////////
      __declspec(deprecated("Deprecated. Use GetIndex")) virtual int GetBeamId() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the comments
      ///
      /// @returns The comments.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual const std::wstring& GetComments() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets the comments
      ///
      /// @param comments The comments.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetComments(const std::wstring& comments) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the reference position
      ///
      /// @returns A pointer to the reference position.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual IVolumePositionPtr GetReferencePosition() = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the reference position
      ///
      /// @returns A constant pointer to the reference position.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual IVolumePositionConstPtr GetReferencePosition() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the measurement position
      ///
      /// @returns A pointer to the measurement position.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual IVolumePositionPtr GetMeasurementPosition() = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the measurement position
      ///
      /// @returns A constant pointer to the measurement position.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual IVolumePositionConstPtr GetMeasurementPosition() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the patch data position
      ///
      /// @returns A pointer to the patch data position.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual IPatchPositionPtr GetDataPosition() = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the patch data position
      ///
      /// @returns A constant pointer to the patch data position.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual IPatchPositionConstPtr GetDataPosition() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the reading collection
      ///
      /// @returns A pointer to the reading collection.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual IReadingCollectionPtr GetReadingCollection() = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the reading collection
      ///
      /// @returns A constant pointer to the reading collection.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual IReadingCollectionConstPtr GetReadingCollection() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the grouping number, a descriptive field to use as you see fit.
      ///
      /// @returns The grouping number.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual std::size_t GetGroupingNumber() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets the grouping number, a descriptive field to use as you see fit.
      ///
      /// @param groupingNumber The grouping number
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetGroupingNumber(std::size_t groupingNumber) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the score of the indication
      ///
      /// @returns The score of the indication.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual double GetScore() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets a score of the indication
      ///
      /// @param score The score of the indication.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetScore(double score) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the custom field collection
      ///
      /// @returns A pointer to the custom field collection.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual ICustomFieldCollectionPtr GetCustomFields() = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the custom field collection
      ///
      /// @returns A constant pointer to the custom field collection.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual ICustomFieldCollectionConstPtr GetCustomFields() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the reference
      ///
      /// @returns The reference.
      /////////////////////////////////////////////////////////////////////////////////////////////
      __declspec(deprecated("Deprecated.")) virtual const std::wstring& GetReference() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets the reference
      ///
      /// @param reference The reference.
      /////////////////////////////////////////////////////////////////////////////////////////////
      __declspec(deprecated("Deprecated.")) virtual void SetReference(const std::wstring& reference) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the category
      ///
      /// @returns The category.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual const std::wstring& GetCategory() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets the category
      ///
      /// @param category The category.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetCategory(const std::wstring& category) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the verdict
      ///
      /// @returns The verdict.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual Verdict GetVerdict() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets the verdict
      ///
      /// @param verdict The verdict.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetVerdict(Verdict verdict) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the inspection method's name included in a configuration.
      ///
      /// @returns The inspection method's name.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual const std::wstring& GetName() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets index
      /// Index can be the beam index for a Phased Array configuration or
      /// column index for a Total Focusing Method condifuration.
      /// Unsed with conventionnal configuration.
      ///
      /// @returns The index.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual size_t GetIndex() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the reference number, a descriptive field to use as you see fit.
      ///
      /// @returns The reference number.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual std::size_t GetReferenceNumber() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Sets the reference number, a descriptive field to use as you see fit.
      ///
      /// @param referenceNumber The reference number
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetReferenceNumber(std::size_t referenceNumber) = 0;
    };

    using IIndicationPtr = std::shared_ptr<IIndication>;
    using IIndicationConstPtr = std::shared_ptr<const IIndication>;
  }
}
