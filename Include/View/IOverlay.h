///////////////////////////////////////////////////////////////////////////////////////////////////
/// @file View\IOverlay.h.
///
/// NDE file domain path Not available in NDE
/// 
/// Declares the IOverlay interface
///////////////////////////////////////////////////////////////////////////////////////////////////
#pragma once
#include <memory>
#include "View/IPoint.h"
#include "View/ISegmentCollection.h"
#include "View/ICircleCollection.h"


namespace Olympus
{
  namespace View
  {
    class IOverlay
    {
    public:
      virtual ~IOverlay() = default;
       
      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Axes Flips 
      ///
      /// NDE file domain path Not available in NDE
      /// 
      /// @returns normal vector X, Y, Z. (1 not flipped, -1 flipped).
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual IPointPtr GetLocalScale() = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Translation related to Flips.
      ///
      /// NDE file domain path Not available in NDE
      /// 
      /// @returns normal vector X, Y, Z. (for now, only Z axis can take -thickness when Z axis is flipped ).
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual IPointPtr GetLocalTranslation() = 0;
      
      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Overlay Translation.
      ///
      /// NDE file domain path Not available in NDE
      /// 
      /// @returns translation vector.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual IPointPtr GetTranslation() = 0;
                 
      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Overlay segments.
      ///
      /// NDE file domain path Not available in NDE
      /// 
      /// @returns segments.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual ISegmentCollectionPtr GetSegments() = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Overlay Circles.
      ///
      /// NDE file domain path Not available in NDE
      /// 
      /// @returns circles.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual ICircleCollectionPtr GetCircles() = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Overlay Thickness.
      ///
      /// NDE file domain path Not available in NDE
      /// 
      /// @returns Overlay Thickness value.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual double GetThickness() = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Overlay Width.
      ///
      /// NDE file domain path Not available in NDE
      /// 
      /// @returns Overlay Width value.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual double GetWidth() = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Rotation In Degree.
      ///
      /// NDE file domain path Not available in NDE
      /// 
      /// @returns Rotation.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual double GetRotation() = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Scale on all axis.
      ///
      /// NDE file domain path Not available in NDE
      /// 
      /// @returns scale in percent.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual double GetScale() = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Overlay Thickness.
      ///
      /// NDE file domain path Not available in NDE
      /// 
      /// @returns Overlay Thickness value.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetThickness(double) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Overlay Width.
      ///
      /// NDE file domain path Not available in NDE
      /// 
      /// @returns Overlay Width value.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetWidth(double) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Rotation In Degree.
      ///
      /// NDE file domain path Not available in NDE
      /// 
      /// @returns Rotation.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetRotation(double) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Scale on all axis.
      ///
      /// NDE file domain path Not available in NDE
      /// 
      /// @returns scale in percent.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void SetScale(double) = 0;
    };

    using IOverlayPtr = std::shared_ptr<IOverlay>;
    using IOverlayConstPtr = std::shared_ptr<const IOverlay>;
  }
}