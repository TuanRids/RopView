///////////////////////////////////////////////////////////////////////////////////////////////////
/// @file View\ISegmentCollection.h.
///
/// NDE file domain path Not available in NDE
/// 
/// Declares the ISegmentCollection interface
///////////////////////////////////////////////////////////////////////////////////////////////////
#pragma once
#include <memory>
#include <View/ISegment.h>


namespace Olympus
{
  namespace View
  {
    class ISegmentCollection
    {
    public:
      virtual ~ISegmentCollection() = default;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets the number of Segment in the collection.
      ///
      /// @returns The count.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual std::size_t GetCount() const = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Gets a Segment.
      ///
      /// NDE file domain path Not available in NDE
      /// 
      /// @param index The index of the Segment.
      ///
      /// @returns A constant pointer to the Segment.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual ISegmentConstPtr GetSegment(std::size_t index) const = 0;

      virtual ISegmentPtr GetSegment(std::size_t index) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Removes the Segment with a given index.
      ///
      /// @param index The index of the Segment to remove.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual void Remove(std::size_t index) = 0;

      /////////////////////////////////////////////////////////////////////////////////////////////
      /// Adds a Segment to the collection.
      ///
      /// @returns A pointer to the Segment.
      /////////////////////////////////////////////////////////////////////////////////////////////
      virtual ISegmentPtr Add() = 0;

    };

    using ISegmentCollectionPtr = std::shared_ptr<ISegmentCollection>;
    using ISegmentCollectionConstPtr = std::shared_ptr<const ISegmentCollection>;
  }
}
