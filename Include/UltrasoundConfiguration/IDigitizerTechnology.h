////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file ultrasoundConfiguration/IDigitizerTechnology.h
///
/// Declares the IDigitizerTechnology interface.
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma once
#include <ultrasoundConfiguration/UltrasoundTypes.h>

namespace Instrumentation
{
  class IBeamSetFactory;
  class IConnectorCollection;
  class IPulserVoltageCollection;
  class IDigitalBandPassFilterCollection;
  class ISmoothingFilterCollection;
  class ITcgTypeCollection;

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Contains the collections of connectors and pulser voltage. 
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  class IDigitizerTechnology
  {
  public:
    virtual ~IDigitizerTechnology() = default;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Get the interface IBeamSetFactory that is used to create an IBeamSet and its configuration.
    ///
    /// @return
    /// The IBeamSetFactory interface for creating beam set configurations.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual std::shared_ptr<IBeamSetFactory> GetBeamSetFactory() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Get the collection of available connectors for this technology. These connectors can be
    /// used to fire a beam set by using IFiringBeamSetCollection::Add
    ///
    /// @return
    /// The interface IConnectorCollection.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual std::shared_ptr<IConnectorCollection> GetConnectorCollection() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Get the pulsing voltage for all connectors of this technology.
    ///
    /// @return
    /// The set voltage for this technology.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual double GetPulserVoltage() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Set the pulsing voltage for all connectors of this technology.
    ///
    /// @param voltage The desired voltage.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetPulserVoltage(double voltage) = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Get the collection of supported pulser voltages for this technology. A supported voltage can
    /// be assigned to connectors associated with this technology with the SetPulserVoltage funtion.
    ///
    /// @return
    /// The interface IPulserVoltageCollection.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual std::shared_ptr<IPulserVoltageCollection> GetPulserVoltageCollection() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Get the collection of supported band pass filters for this technology.
    /// A supported filter can be set to a beam set by using FilterSettings::SetDigitalBandPassFilter.
    ///
    /// @return
    /// The interface IDigitalBandPassFilterCollection.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual std::shared_ptr<IDigitalBandPassFilterCollection> GetDigitalBandPassFilterCollection() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Get the collection of supported smoothing filters for this technology.
    /// A supported filter can be set to a beam set by using FilterSettings::SetsmoothingFilter.
    ///
    /// @return
    /// The interface ISmoothingFilterCollection.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual std::shared_ptr<ISmoothingFilterCollection> GetSmoothingFilterCollection() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Get the collection of supported TCG Types with their caps.
    ///
    /// @return
    /// The interface ITcgTypeCollection.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual std::shared_ptr<ITcgTypeCollection> GetTcgTypes() const = 0;
  };

  using IDigitizerTechnologyPtr = std::shared_ptr<IDigitizerTechnology>;
  using IDigitizerTechnologyConstPtr = std::shared_ptr<const IDigitizerTechnology>;
}
