////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file ultrasoundConfiguration/IDigitizingSettings.h
///
/// Declares the IDigitizingSettings interface.
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma once
#include <ultrasoundConfiguration/UltrasoundTypes.h>

namespace Instrumentation
{
  class IFilterSettings;
  class IAmplitudeSettings;
  class ITimeSettings;

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Contains the interface for filter, amplitude and time settings for the beam set. 
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  class IDigitizingSettings
  {
  public:
    virtual ~IDigitizingSettings() = default;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Get the interface for filter settings. This interface controls band pass and smoothing filter.
    ///
    /// @return
    /// The interface IFilterSettings.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual std::shared_ptr<IFilterSettings> GetFilterSettings() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Get the interface for amplitude settings. This interface contains settings for data size, 
    /// scaling type and rectification. 
    ///
    /// @return
    /// The interface IAmplitudeSettings.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual std::shared_ptr<IAmplitudeSettings> GetAmplitudeSettings() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Get the interface for time settings. This interface contains settings for compression,
    /// synchronization, sampling decimation and resolution.
    ///
    /// @return
    /// The interface ITimeSettings.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual std::shared_ptr<ITimeSettings> GetTimeSettings() const = 0;
  };

  using IDigitizingSettingsPtr = std::shared_ptr<IDigitizingSettings>;
  using IDigitizingSettingsConstPtr = std::shared_ptr<const IDigitizingSettings>;
}
