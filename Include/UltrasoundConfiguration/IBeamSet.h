////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file ultrasoundConfiguration/IBeamSet.h
///
/// Declares the IBeamSet interface.
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma once
#include <ultrasoundConfiguration/UltrasoundTypes.h>

namespace Instrumentation
{
  class IBeam;
  class IDigitizerTechnology;
  class IPulsingSettings;
  class IDigitizingSettings;

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// A beam set contains all the beams that will be fired by a single connector or paired connectors. 
  /// A beam set can be fired on a connector or a pair with the interface IFiringBeamSetCollection.
  /// A beam set regroups many different beams that all have their own IBeam Interface.
  /// A beam set gives access to many settings that affect all beams in its collection.
  //////////////////////////////////////////////////////////////////////////////////////////////////// 
  class IBeamSet
  {
  public:
    enum class 
    __declspec(deprecated("Deprecated. Redundant information: the type is defined by the beamset use."))
    Type { Conventional, PhasedArray };

    virtual ~IBeamSet() = default;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Get the number of beams in this beam set.
    ///
    /// @return
    /// The number of beams.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual std::size_t GetBeamCount() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Returns the Interface of the beam positioned at the given index in the Firing Order.
    ///
    /// @param index The position of the desired beam.
    ///
    /// @return
    /// The interface IBeam of the specified Beam.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual std::shared_ptr<IBeam> GetBeam(std::size_t index) const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Get the given name of the beam set.
    ///
    /// @return
    /// The name of the beam set.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual const std::wstring& GetName() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Set the given name of the beam set.
    ///
    /// @param name The new name for the beam set.
    ///
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetName(const std::wstring& name) = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Get the ultrasound technology of the digitizer. This is related to the hardware used.
    ///
    /// @return
    /// The actual UltrasoundTechnology enum of the beam set.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual UltrasoundTechnology GetUltrasoundTechnology() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Get the type of beam set. This is related to the application.
    ///
    /// @return
    /// The actual Type enum of the beam set.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    __declspec(deprecated("Deprecated. Redundant information: the type is defined by the beamset use."))
    virtual IBeamSet::Type GetBeamSetType() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Get the interface for pulsing settings. The settings include pulse width, pulse repetition,
    /// voltage and averaging factor. 
    ///
    /// @return
    /// The IPulsingSettings interface.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual std::shared_ptr<IPulsingSettings> GetPulsingSettings() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Get the interface for digitizing settings. This interface contains the interfaces for 
    /// filter, amplitude and time settings. 
    ///
    /// @return
    /// The IDigitizingSettings interface.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual std::shared_ptr<IDigitizingSettings> GetDigitizingSettings() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Compare this BeamSet to another for equality.
    ///
    /// @return
    /// True if both objects represent the same instance, False otherwise.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool Equals(std::shared_ptr<IBeamSet>) const = 0;
  };

  using IBeamSetPtr = std::shared_ptr<IBeamSet>;
  using IBeamSetConstPtr = std::shared_ptr<const IBeamSet>;
}
