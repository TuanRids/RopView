///////////////////////////////////////////////////////////////////////////////////////////////////
/// @file PartDefinition\IWeld.h.
///
/// @image html Weld.png "Weld sections" width=50%
/// 
/// NDE file domain path specimens[index] / weldGeometry 
/// 
/// Declares the IWeld interface
///////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include <memory>

namespace Olympus { namespace PartDefinition
{

  class IWeldFillCollection;
  using IWeldFillCollectionPtr = std::shared_ptr<IWeldFillCollection>;
  using IWeldFillCollectionConstPtr = std::shared_ptr<const IWeldFillCollection>;

  class IWeldLandOfCrossPenetration;
  using IWeldLandOfCrossPenetrationPtr = std::shared_ptr<IWeldLandOfCrossPenetration>;
  using IWeldLandOfCrossPenetrationConstPtr = std::shared_ptr<const IWeldLandOfCrossPenetration>;

  class IWeldSection;
  using IWeldSectionPtr = std::shared_ptr<IWeldSection>;
  using IWeldSectionConstPtr = std::shared_ptr<const IWeldSection>;

  class IWeldCap;
  using IWeldCapPtr = std::shared_ptr<IWeldCap>;
  using IWeldCapConstPtr = std::shared_ptr<const IWeldCap>;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// Symmetry of the weld
////////////////////////////////////////////////////////////////////////////////////////////////////
enum class WeldType
{
  symmetric,           /**< Weld is symmetric*/
  flatRightHandSide,  /**< Right hand side of the weld is flat*/
  flatLeftHandSide,   /**< Left hand side of the weld is flat*/
};

//////////////////////////////////////////////////////////////////////////////////////////////////
/// Shape of the weld bevel
/// 
/// @image html BevelType.png width=60%
/// 
/// U: Defined by a radius mesured between the hot pass and the fill. The radius extends to the
/// point where it becomes tangential to the fill region (where it crosses, or touches the fill
/// region angle).
/// 
/// V: Comprised of an angled wall, the height of which is mesured between the hot pass and the fill.
//////////////////////////////////////////////////////////////////////////////////////////////////
enum class WeldBevel
{
  U, /**< Weld bevel is U-shaped*/
  V, /**< Weld bevel is V-shaped*/
};


////////////////////////////////////////////////////////////////////////////////////////////////////
 /// Describes a weld and its regions.
 /// 
 /// A weld is described by its fills, its hot pass, its land, its root, its symmetry and its bevel type.
 /// 
 /// @image html WeldRegion.png width=60%
 /// 
 ////////////////////////////////////////////////////////////////////////////////////////////////////
class IWeld
{
public:
  virtual ~IWeld() = default;

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Get the root section of the weld. This region extends at an angle from below the land region
  /// to the bottom of the specimen. Also known as the "root fill".
  /// 
  /// NDE file domain path specimens[index] / weldGeometry / root
  ///
  /// @return
  /// The root section
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  virtual IWeldSectionPtr GetRoot() = 0;

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Get the root section of the weld. This region extends at an angle from below the land region
  /// to the bottom of the specimen. Also known as the "root fill".
  /// 
  /// @return
  /// The const root section
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  virtual IWeldSectionConstPtr GetRoot() const = 0;

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Get the hot pass section of the weld. This region is just below the fills and over the land of
  /// the weld. This region can be of two bevel types (See WeldBevel documentation for more information).
  ///
  ///  NDE file domain path specimens[index] / weldGeometry / hotPass
  /// 
  /// @return
  /// The hot pass section
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  virtual IWeldSectionPtr GetHotPass() = 0;

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Get the hot pass section of the weld. This region is just below the fills and over the land of
  /// the weld. This region can be of two bevel types (See WeldBevel documentation for more information).
  /// 
  /// @return
  /// The const hot pass section
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  virtual IWeldSectionConstPtr GetHotPass() const = 0;

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Get the land section of the weld. This region is just below the hot pass and over the root of the
  /// weld. The land is a vertical portion the weld which can be offset by a certain width.
  ///
  /// NDE file domain path specimens[index] / weldGeometry / land
  /// 
  /// @return
  /// The land section
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  virtual IWeldLandOfCrossPenetrationPtr GetLandOfCrossPenetration() = 0;

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Get the land section of the weld. This region is just below the hot pass and over the root of the
  /// weld. The land is a vertical portion the weld which can be offset by a certain width.
  ///
  /// @return
  /// The const land section
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  virtual IWeldLandOfCrossPenetrationConstPtr GetLandOfCrossPenetration() const = 0;

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Get the fill sections of the weld. These regions are located over the hot pass. They extends at an
  /// angle from the hot pass to the next fill or the top of the weld. An angle of 0 results in a
  /// vertical fill.
  ///
  /// NDE file domain path specimens[index] / weldGeometry / fills
  /// 
  /// @return
  /// The fill section collection
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  virtual IWeldFillCollectionConstPtr GetFills() const = 0;

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Get the fill sections of the weld. These regions are located over the hot pass. They extends at an
  /// angle from the hot pass to the next fill or the top of the weld. An angle of 0 results in a
  /// vertical fill.
  ///
  /// @return
  /// The const fill section collection
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  virtual IWeldFillCollectionPtr GetFills() = 0;

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Get the shape of the weld bevel (See WeldBevel documentation for more information).
  ///
  /// NDE file domain path specimens[index] / weldGeometry / bevelShape
  /// 
  /// @return
  /// The U or V shape of the weld bevel
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  virtual WeldBevel GetBevelShape() const = 0;

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Get the type of weld (See WeldType documentation for more information).
  ///
  /// NDE file domain path specimens[index] / weldGeometry / symmetry
  /// 
  /// @return
  /// The type of weld : symmetric, flatRightHandSide or flatLeftHandSide
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  virtual WeldType GetWeldType() const = 0;

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Get the thickness of the weld.
  ///
  /// NDE file domain path specimens[index] / plateGeometry or pipeGeometry / thickness
  /// 
  /// @return
  /// The thickness of the weld: Root height + Land height + Hot Pass height + all fill height
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  virtual double GetThickness() const = 0;

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Get the heat affected zone of the weld.
  ///
  /// NDE file domain path specimens[index] / weldGeometry / heatAffectedZoneWidth
  /// 
  /// @return
  /// The heat affected zone width of the weld.
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  virtual double GetHeatAffectedZoneWidth() const = 0;
  
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Set the heat affected zone.
  ///
  /// @param height
  /// The heat affected zone width in millimeters.
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  virtual void SetHeatAffectedZoneWidth(double heatAffectedZoneWidth) = 0;

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Get the upper cap of the weld. (duplicate of GetUpperCap)
  ///
  /// NDE file domain path specimens[index] / weldGeometry / upperCap
  /// 
  /// @return
  /// The weld cap
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  virtual IWeldCapPtr GetCap() = 0;

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Get the upper cap of the weld. (duplicate of GetUpperCap)
  ///
  /// @return
  /// The weld cap
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  virtual IWeldCapConstPtr GetCap() const = 0;

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Get the lower cap of the weld.
  ///
  ///  NDE file domain path specimens[index] / weldGeometry / lowerCap
  /// 
  /// @return
  /// The weld cap
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  virtual IWeldCapPtr GetLowerCap() = 0;

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Get the lower cap of the weld.
  ///
  /// @return
  /// The weld cap
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  virtual IWeldCapConstPtr GetLowerCap() const = 0;

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Get the upper cap of the weld.
  ///
  /// NDE file domain path specimens[index] / weldGeometry / upperCap
  /// 
  /// @return
  /// The weld cap
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  virtual IWeldCapPtr GetUpperCap() = 0;

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Get the upper cap of the weld.
  ///
  /// @return
  /// The weld cap
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  virtual IWeldCapConstPtr GetUpperCap() const = 0;
};

using IWeldPtr = std::shared_ptr<IWeld>;
using IWeldConstPtr = std::shared_ptr<const IWeld>;
}}
