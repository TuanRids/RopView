////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file IFirmwarePackageCollection.h
///
/// Declares the IFirmwarePackageCollection interface.
////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma once
#include <instrumentation/InstrumentationTypes.h>
#include <ultrasoundConfiguration/UltrasoundTypes.h>

namespace Instrumentation
{
  class IFirmwarePackage;

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /// This interface regroups all the different firmware package interfaces available.
  ///
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  class IFirmwarePackageCollection
  {
  public:
    virtual ~IFirmwarePackageCollection() = default;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Get the number of IFirmwarePackageCollection interfaces in this collection.
    ///
    /// @return
    /// The number of interfaces.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual std::size_t GetCount() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Get the specified interface IFirmwarePackage corresonding to the index given. 
    ///
    /// @param index The index of the desired interface.
    ///
    /// @return
    /// The interface IFirmwarePackage.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual std::shared_ptr<IFirmwarePackage> GetFirmwarePackage(std::size_t index) const = 0;

  };
}
