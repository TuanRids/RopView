#pragma once
#include <ultrasoundConfiguration/UltrasoundTypes.h>

namespace Instrumentation
{
  class IDeviceInfo
  {
  public:
    enum class Platform 
    { 
      FocusPx, 
      FocusPxETO0366,
      OmniScanX3,
      OmniScanMX2,
      OmniScanSX,
      OmniScanMX,
      Unknown,
    };

    enum class Model { 
      Unknown = 0, // Model, with no specific capabilities
      UT4, 
      PA16x64, 
      PA16x128, 
      PA32x128,
      PA64x128,
      PA32x64
    };

    virtual ~IDeviceInfo() = default;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Get the IPv4 network address of the device.
    ///
    /// @return
    /// The serial number of the device.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual std::string GetAddressIPv4() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Get the device serial number.
    ///
    /// @return
    /// The serial number of the device.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual std::string GetSerialNumber() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Get the device platform.
    /// Examples of model : FocusPX, FocusPX ETO 0366.
    ///
    /// @return
    /// The device type.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual Platform GetPlatform() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Get the device model.
    /// Examples : UT4, PA16x64, PA16x128, PA32x128
    ///
    /// @return
    /// The device model type.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual Model GetModel() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Get the device system version.
    ///
    /// @return
    /// The device sytem version.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual std::string GetVersion() const = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Get the device name.
    ///
    /// @return
    /// The device name.
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual std::wstring GetName() const = 0;
  };

  using IDeviceInfoPtr = std::shared_ptr<IDeviceInfo>;
  using IDeviceInfoConstPtr = std::shared_ptr<const IDeviceInfo>;
}
